#START-FILE-LIST
# File List auto generated by waf2cmake.py, do not modify manually.

start_sources()
# -- cryaudioimpl.waf_files --
sources_platform(ALL)
add_sources("CryAudioImpl_uber_0.cpp"
	SOURCE_GROUP "Header Files"
		"ATLEntities.h"
		"AudioEvent.h"
		"AudioImpl.h"
		"AudioImplCVars.h"
		"AudioObject.h"
		"Common.h"
		"resource.h"
		"stdafx.h"
	SOURCE_GROUP "Source Files"
		"AudioEvent.cpp"
		"AudioImpl.cpp"
		"AudioImplCVars.cpp"
		"AudioObject.cpp"
		"Common.cpp"
		"CryAudioImpl.cpp"
)

add_sources("NoUberFile"
	SOURCE_GROUP "Root"
		"stdafx.cpp"
)

end_sources()
#END-FILE-LIST

if(EXISTS ${SDK_DIR}/Audio/fmod)
	CryEngineModule(CryAudioImplFmod PCH "stdafx.cpp" SOLUTION_FOLDER "CryEngine/Audio/Implementations")
	target_include_directories( ${THIS_PROJECT} PRIVATE ../../Common )
	if (WIN64)
		target_include_directories(${THIS_PROJECT} PRIVATE ${SDK_DIR}/Audio/fmod/windows/api/lowlevel/inc ${SDK_DIR}/Audio/fmod/windows/api/studio/inc)
		find_library(FMOD fmod64_vc PATHS ${SDK_DIR}/Audio/fmod/windows/api/lowlevel/lib)
		find_library(FMODSTUDIO fmodstudio64_vc PATHS ${SDK_DIR}/Audio/fmod/windows/api/studio/lib)
	elseif(WIN32)
		target_include_directories(${THIS_PROJECT} PRIVATE ${SDK_DIR}/Audio/fmod/windows/api/lowlevel/inc ${SDK_DIR}/Audio/fmod/windows/api/studio/inc)
		find_library(FMOD fmod_vc PATHS ${SDK_DIR}/Audio/fmod/windows/api/lowlevel/lib)
		find_library(FMODSTUDIO fmodstudio_vc PATHS ${SDK_DIR}/Audio/fmod/windows/api/studio/lib)
	elseif(LINUX64)
		target_include_directories(${THIS_PROJECT} PRIVATE ${SDK_DIR}/Audio/fmod/windows/api/lowlevel/inc ${SDK_DIR}/Audio/fmod/linux/api/studio/inc)
		find_library(FMOD fmod PATHS ${SDK_DIR}/Audio/fmod/linux/api/lowlevel/lib/x86_64)
		find_library(FMODSTUDIO fmodstudio PATHS ${SDK_DIR}/Audio/fmod/linux/api/studio/lib/x86_64)
	elseif(LINUX32)
		target_include_directories(${THIS_PROJECT} PRIVATE ${SDK_DIR}/Audio/fmod/windows/api/lowlevel/inc ${SDK_DIR}/Audio/fmod/linux/api/studio/inc)
		find_library(FMOD fmod PATHS ${SDK_DIR}/Audio/fmod/linux/api/lowlevel/lib/x86)
		find_library(FMODSTUDIO fmodstudio PATHS ${SDK_DIR}/Audio/fmod/linux/api/studio/lib/x86)
	elseif(DURANGO)
		target_link_libraries(${THIS_PROJECT} PRIVATE acphal)
	endif()
	target_link_libraries(${THIS_PROJECT} PRIVATE ${FMOD} ${FMODSTUDIO})
	target_compile_definitions(${THIS_PROJECT} PRIVATE -DFMOD_FOR_$<UPPER_CASE:$<CONFIG>>)
else()
	CryFileContainer(CryAudioImplFmod SOLUTION_FOLDER "CryEngine/Audio/Implementations")
endif()
