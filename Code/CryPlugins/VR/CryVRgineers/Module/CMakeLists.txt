#START-FILE-LIST
# File List auto generated by waf2cmake.py, do not modify manually.

start_sources()
# -- cryopenvr.waf_files --
sources_platform(ALL)
add_sources("CryVRgineers_uber_0.cpp"
    SOURCE_GROUP "Interface"
        "../Interface/IVRgineersDevice.h"
        "../Interface/IVRgineersPlugin.h"
    SOURCE_GROUP "Root"
	 "StdAfx.cpp"
         "StdAfx.h"
         "VRgineersDevice.cpp"
         "VRgineersDevice.h"
         "VRgineersPlugin.cpp"
         "VRgineersPlugin.h"
         "DeviceProvider.h"
         "DeviceProvider.cpp"
         "VRgineersUtils.h"
         "VRgineersUtils.cpp"
)

add_sources("NoUberFile"
    SOURCE_GROUP "Root"
        "StdAfx.cpp"
)

end_sources()
#END-FILE-LIST

if(WINDOWS OR APPLE OR LINUX)
    CryEngineModule(CryVRgineers PCH "StdAfx.cpp" SOLUTION_FOLDER "CryPlugins")

    target_include_directories(${THIS_PROJECT}
    PRIVATE
        "${CRYENGINE_DIR}/Code/CryEngine/CryCommon"
        "${CRYENGINE_DIR}/Code/CryEngine/CryAction"
        "${CRYENGINE_DIR}/Code/CryEngine/CrySchematyc/Core/Interface"
        "${CRYENGINE_DIR}/Code/CryPlugins/CryDefaultEntities/Module"
        "${SDK_DIR}/VRgineers"
    PUBLIC
        ../Interface
    )

    if(WINDOWS)
        find_library(hmd64 hmd64 PATHS "${SDK_DIR}/VRgineers")
    elseif(APPLE)
        find_library(hmd64 hmd64 PATHS "${SDK_DIR}/VRgineers")
    elseif(LINUX)
        find_library(hmd64 hmd64 PATHS "${SDK_DIR}/VRgineers")
    endif()

    target_link_libraries(${THIS_PROJECT} PRIVATE "${hmd64}")

    if(CMAKE_CXX_COMPILER_ID MATCHES "[Cc]lang")
        target_compile_options(${THIS_PROJECT} PRIVATE
            -Wno-unused-variable
            -Wno-reorder
            -Wno-unknown-pragmas
            -Wno-parentheses
            -Wno-switch
            -Wno-format
            -Wno-dynamic-class-memaccess
            -Wno-unused-private-field
            -Wno-unused-value
            -Wno-invalid-offsetof
            -Wno-multichar
            -Wno-char-subscripts
            -Wno-null-conversion
            -Wno-empty-body
            -Wno-unused-lambda-capture
            -Wno-unused-function
            -Wno-tautological-constant-out-of-range-compare
        )
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
        target_compile_options(${THIS_PROJECT} PRIVATE
            -Wno-unused-function
            -Wno-unused-value
            -Wno-unused-variable
            -Wno-aligned-new
            -Wno-int-in-bool-context
            -Wno-invalid-offsetof
            -Wno-comment
            -Wno-sign-compare
            -Wno-unused-but-set-variable
            -Wno-maybe-uninitialized
            -Wno-misleading-indentation
            -Wno-unused-result
            -Wno-unknown-pragmas
            -Wno-multichar
            -Wno-strict-aliasing
            -Wno-char-subscripts
            -Wno-conversion-null
            -Wno-reorder
            -Wno-parentheses
            -Wno-format
            -Wno-switch
        )
    endif()
endif()